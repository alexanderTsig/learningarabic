<?php

$app->get('/image/:filename/:width(/:height)', function($filename, $width, $height = 0) use ($app) {
	if ($width > 450 || $height > 450)
		$app->halt(403, 'Request forbidden due to invalid image dimensions.');
		
	$img = new Imagick("/var/www/portal.pathtoarabic.com/public/img/$filename");
	$img->resizeImage($width, $height, imagick::FILTER_LANCZOS, 0.9);
	$app->contentType('image/' . $img->getImageFormat());
	echo $img;
});

$app->get('/', function() use ($app, $user) {
	$app->redirect('/home');
});

$app->get('/login', function() use ($app, $user) {
	if ($user->isLoggedIn())
		$app->redirect('/home');

	# FIXME: nonce handling is broken because user id cannot be known in advance. What's the solution?
	$app->render('login.twig', [
		'loginurl' => \PTA\App::getLoginURL(),
		'nonce'    => $user->createNonce($_SERVER['REMOTE_ADDR'], 'login', 0)
	]);
});

//Inveera added code
$app->post('/api/user/crop', function($image = null) use ($app, $user) {
	//$app->render('UploadPicture.php');

	//echo file_exists($_SERVER['DOCUMENT_ROOT']."/path2arabic/code/public/img/".$user->getUserId().'.png');
		$filename=$user->getUserId().'.png';
	$sTempFileName =($_SERVER['DOCUMENT_ROOT']."/path2arabic/code/public/img/$filename");
	 $aSize = '.png';
	
	  $iJpgQuality = 1000;
	 
	// if(!empty($iWidth) && $iHeight!=0){}else{
	 list($width, $height, $type, $attr) = getimagesize($sTempFileName);
	      
		  if($_POST['width']>160 && $_POST['height']>160){
		 
		  $iWidth = $_POST['width'];
		  $iHeight = $_POST['height'];

		//if($width<$_POST['width'] && $_POST['width']<$height){
		 header('Content-Type: image/jpeg');

			// Get new sizes
			list($width, $height) = getimagesize($sTempFileName);
			$newwidth = $iWidth;
			$newheight = $iHeight;

			// Load
			$thumb = imagecreatetruecolor($newwidth, $newheight);
			$source = imagecreatefromjpeg($sTempFileName);

			// Resize
			imagecopyresized($thumb, $source, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);
			
			imagejpeg($thumb,$sTempFileName,100);
			//}
		  }else{
		  $iWidth = $width;
		  $iHeight = $height;
         header('Content-Type: image/jpeg');

			// Get new sizes
			list($width, $height) = getimagesize($sTempFileName);
			$newwidth = $_POST['width'];
			$newheight =$_POST['height'];

			// Load
			$thumb = imagecreatetruecolor($newwidth, $newheight);
			$source = imagecreatefromjpeg($sTempFileName);

			// Resize
			imagecopyresized($thumb, $source, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);

			
			imagejpeg($thumb);
			imagejpeg($thumb,$sTempFileName,100);
		  
		  }

	  	$sTempFileName =($_SERVER['DOCUMENT_ROOT']."/path2arabic/code/public/img/$filename");
	      $aSize = '.png';
                 	  switch($aSize) {
                            case '.jpg':
                                $sExt = '.jpg';

                                // create a new image from file
                                $vImg = @imagecreatefromjpeg($sTempFileName);
                                break;
                            case '.png':
                                $sExt = '.png';

                                
								$vImg = imagecreatefromstring(file_get_contents($sTempFileName));    
								
							if ($vImg === false) {
								throw new Exception ('Image is corrupted');
							}
                                break;
                            default:
                                @unlink($sTempFileName);
                                return;
                        }

                        // create a new true color image
                        $vDstImg = imagecreatetruecolor( (int)$iWidth, (int)$iHeight );

               
					   $x=(($_POST['cropx']));
					   $y=(($_POST['cropy']));
				    
                        imagecopyresampled($vDstImg, $vImg, (int)0, (int)0, $x,$y,(int)$iWidth,(int)$iHeight, (int)(($_POST['cwidth'])), (int)(($_POST['cheight'])));

                        // define a result image filename
                        $sResultFileName = $sTempFileName ;

                        // output image to file
                        imagejpeg($vDstImg, $sResultFileName, $iJpgQuality);
                     
                        return $sResultFileName;
						
						
	
	
});

$app->get('/welcome', function() use ($app, $user) {
	#if ($user->hasCompletedSurvey())
	#	$app->redirect('/home');

	$app->render('welcome.twig', [
		'pjax' => array_key_exists('X-PJAX', getallheaders()),
		'name' => $user->getName()
	]);
});

$app->get('/survey', function() use ($app, $user) {
	if ($user->hasCompletedSurvey())
		$app->redirect('/home');

	$teachers = \PTA\App::getTeachers();

	$male_teachers = [];
	$female_teachers = [];
	foreach ($teachers as $teacher) {
		if ($teacher['gender'] === 'M') {
			$male_teachers[] = $teacher['name'];
		} else {
			$female_teachers[] = $teacher['name'];
		}

	}

	$male_teacher_names = implode(', ', $male_teachers);
	$female_teacher_names = implode(', ', $female_teachers);

	$app->render('survey.twig', [
		'pjax'            => array_key_exists('X-PJAX', getallheaders()),
		'referral_types'  => \PTA\App::getReferralTypes(),
		'male_teachers'   => $male_teacher_names,
		'female_teachers' => $female_teacher_names
	]);
});

$app->post('/api/user/fetchfrnd', function() use ($app, $user) {
//print_r($_POST['searchval']);exit;

 
include_once ('../facebook-php/src/facebook.php');
// we need FB php sdk
$facebook = new Facebook(array(   // init FB class
   'appId'=>"1515700912005058",
   'secret'=>"32e0aa556bba9128ffabc7d0d3d6a336"
));

$term = $_POST['searchval'];  // Our search term
// Of course you need to make validation of user and term for quotes, but I think you could do this ;)
// And call Facebook query
$friends = $facebook->api(array(
   'method' => 'fql.query',
   'query' => 'SELECT uid, name, pic_square FROM user WHERE uid IN (SELECT uid2 FROM friend WHERE uid1 = me()) and strpos(lower(name),"'.$term.'") >=0'
));
die(json_encode($friends));
});
$app->post('/api/user/imgsave', function() use ($app, $user) {
print_r($_POST);exit;
});
/*  02-Sept-2014  inveera */
$app->post('/api/user/myfriendmonth', function() use ($app, $user) {
$levels = \PTA\App::getLevels();

	foreach ($levels as &$level) {
		$level['progress'] = $user->getProgress($level['id']);
	}

	$start = $user->getStartPosition();
	$renewal_time = null;

	$signupDate = $user->getSignupDate();
    $friends=$user->getAllmonthFriends($user->getUserId(),$_POST['monts']);


	$app->render('myfriends.twig', [
		'pjax'          => array_key_exists('X-PJAX', getallheaders()),
		'id'            => $user->getUserId(),
		'name'          => $user->getName(),
		'email'         => $user->getEmail(),
		'levels'        => $levels,
		'user_level'    => $user->getLevel(),
		'progress'      => $user->getProgress(),
		'startlevel'    => $start['level'],
		'minlesson'     => $user->getMinLesson(),
		'maxlesson'     => $user->getMaxLesson(),
		'announcements' => \PTA\App::getAnnouncements(5),
		'renewal_time'  => $renewal_time,
		'product'       => $user->getMembershipType(),
		'friends'       =>$friends,
		#'signupdate'    => strftime('%B %G', strtotime($signupDate['month'] . '/01/' . $signupDate['year'])),
		'board'         => $user->calculateLeaderboard(8,$user->getUserId()),
		'tips'          => $user->getTips('home'),
		'name1'          => $user->getName(),
	]); 
});
/*  02-Sept-2014  inveera */
$app->post('/api/user/myfriendmonthall', function() use ($app, $user) {
$levels = \PTA\App::getLevels();

	foreach ($levels as &$level) {
		$level['progress'] = $user->getProgress($level['id']);
	}

	$start = $user->getStartPosition();
	$renewal_time = null;

	$signupDate = $user->getSignupDate();
    $friends=$user->getAllmonthFriends($user->getUserId(),$_POST['monts']);


	$app->render('myfriends.twig', [
		'pjax'          => array_key_exists('X-PJAX', getallheaders()),
		'id'            => $user->getUserId(),
		'name'          => $user->getName(),
		'email'         => $user->getEmail(),
		'levels'        => $levels,
		'user_level'    => $user->getLevel(),
		'progress'      => $user->getProgress(),
		'startlevel'    => $start['level'],
		'minlesson'     => $user->getMinLesson(),
		'maxlesson'     => $user->getMaxLesson(),
		'announcements' => \PTA\App::getAnnouncements(5),
		'renewal_time'  => $renewal_time,
		'product'       => $user->getMembershipType(),
		'friends'       =>$friends,
		#'signupdate'    => strftime('%B %G', strtotime($signupDate['month'] . '/01/' . $signupDate['year'])),
		'board'         => $user->calculateLeaderboardnew(8,$user->getUserId(),$_POST['monts']),
		'tips'          => $user->getTips('home'),
		'name1'          => $user->getName(),
	]); 
});
/*  02-Sept-2014  inveera */
$app->post('/api/user/myfriend', function() use ($app, $user) {
$levels = \PTA\App::getLevels();

	foreach ($levels as &$level) {
		$level['progress'] = $user->getProgress($level['id']);
	}

	$start = $user->getStartPosition();
	$renewal_time = null;

	$signupDate = $user->getSignupDate();
   // $friends=$user->getAllFriends($user->getUserId());


	$app->render('myfriends.twig', [
		'pjax'          => array_key_exists('X-PJAX', getallheaders()),
		'id'            => $user->getUserId(),
		'name'          => $user->getName(),
		'email'         => $user->getEmail(),
		'levels'        => $levels,
		'user_level'    => $user->getLevel(),
		'progress'      => $user->getProgress(),
		'startlevel'    => $start['level'],
		'minlesson'     => $user->getMinLesson(),
		'maxlesson'     => $user->getMaxLesson(),
		'announcements' => \PTA\App::getAnnouncements(5),
		'renewal_time'  => $renewal_time,
		'product'       => $user->getMembershipType(),
		'friends'       =>$friends,
		#'signupdate'    => strftime('%B %G', strtotime($signupDate['month'] . '/01/' . $signupDate['year'])),
		'board'         => $user->calculateLeaderboard(8,$user->getUserId()),
		'tips'          => $user->getTips('home'),
		'name1'          => $user->getName(),
	]); 
});
/*  02-Sept-2014  inveera */

$app->get('/home', function() use ($app, $user) {
	# Force new users to take the survey
	if (! $user->hasCompletedSurvey())
		$app->redirect('/welcome');

	$levels = \PTA\App::getLevels();

	foreach ($levels as &$level) {
		$level['progress'] = $user->getProgress($level['id']);
	}

	$start = $user->getStartPosition();
	$renewal_time = null;

	/* if ($user->getMembershipType() === 'Silver') {
		if ($user->memberShipExpiresIn(1 * \PTA\Time::WEEK))
			$renewal_time = '1 week';
	} else {
		for ($i = 1; $i <= 4; $i++) {
			if ($user->membershipExpiresIn($i * \PTA\Time::WEEK)) {
				switch ($i) {
					case 4:
						$renewal_time = '1 month';
						break;
					case 1:
						$renewal_time = '1 week';
						break;
					default:
						$renewal_time = "$i weeks";
				}
				break;
			}
		}
	}; */
	
	/* Warn of expiring membership during the final week
	if ($user->memberShipExpiresIn(1 * \PTA\Time::WEEK) && ! $user->hasCancelledMembership()) {
		$renewal_time = '1 week';
	}; */

	$signupDate = $user->getSignupDate();
	
		//$friends=$user->getAllFriends($user->getUserId());
	
	
	$app->render('home.twig', [
		'pjax'          => array_key_exists('X-PJAX', getallheaders()),
		'id'            => $user->getUserId(),
		'name'          => $user->getName(),
		'email'         => $user->getEmail(),
		'levels'        => $levels,
		'user_level'    => $user->getLevel(),
		'progress'      => $user->getProgress(),
		'startlevel'    => $start['level'],
		'minlesson'     => $user->getMinLesson(),
		'maxlesson'     => $user->getMaxLesson(),
		'announcements' => \PTA\App::getAnnouncements(5),
		'renewal_time'  => $renewal_time,
		'product'       => $user->getMembershipType(),
		#'signupdate'    => strftime('%B %G', strtotime($signupDate['month'] . '/01/' . $signupDate['year'])),
		'board'         => $user->calculateLeaderboard(4),
		'tips'          => $user->getTips('home')
	]);
});

$app->get('/leaderboard', function() use ($app, $user) {
	$board = $user->calculateLeaderboard(4);
	$signupDate = $user->getSignupDate();

	$app->render('leaderboard.twig', [
		'pjax'       => array_key_exists('X-PJAX', getallheaders()),
		'user_id'    => $user->getUserId(),
		'signupdate' => strftime('%B %G', strtotime($signupDate['month'] . '/01/' . $signupDate['year'])),
		'board'      => $board
	]);
});

$app->get('/statistics', function() use ($app, $user) {
	$app->render('statistics.twig', [
		'pjax' => array_key_exists('X-PJAX', getallheaders())
	]);
});

$app->get('/preferences', function() use ($app, $user) {
	$app->render('preferences.twig', [
		'pjax'           => array_key_exists('X-PJAX', getallheaders()),
		'default_gender' => $user->getPreferredGender(),
		'levels'         => \PTA\App::getLevels()
	]);
});

/* $app->get('/attendance', function() use ($app, $user) {
	$app->render('attendance.twig', [
		'pjax' => array_key_exists('X-PJAX', getallheaders())
	]);
}); */

$app->get('/membership', function() use ($app, $user) {
	$app->render('membership.twig', [
		'pjax' => array_key_exists('X-PJAX', getallheaders())
	]);
});

$app->get('/support', function() use ($app, $user) {
	$app->render('support.twig', [
		'pjax' => array_key_exists('X-PJAX', getallheaders())
	]);
});

$app->get('/support/faq', function() use ($app, $user) {
	$app->render('support-faq.twig', [
		'pjax' => array_key_exists('X-PJAX', getallheaders()),
		'faq'  => \PTA\App::getFAQ()
	]);
});

$app->get('/support/teacher', function() use ($app, $user) {
	$app->render('support-teacher.twig', [
		'pjax'      => array_key_exists('X-PJAX', getallheaders()),
		'email'     => $user->getEmail(),
		'class'		=> $user->getClass(),
		'nonce'     => $user->createNonce($_SERVER['REMOTE_ADDR'], 'support-contact')
	]);
});

$app->get('/support/contact', function() use ($app, $user) {
	$app->render('support-contact.twig', [
		'pjax'      => array_key_exists('X-PJAX', getallheaders()),
		'email'     => $user->getEmail(),
		'class'		=> $user->getClass(),
		'nonce'     => $user->createNonce($_SERVER['REMOTE_ADDR'], 'support-contact')
		# 'countries' => \PTA\App::getCountryList(),
	]);
});

$app->get('/support/feedback', function() use ($app, $user) {
	$app->render('support-feedback.twig', [
		'pjax'      => array_key_exists('X-PJAX', getallheaders()),
		'email'     => $user->getEmail(),
		'nonce'     => $user->createNonce($_SERVER['REMOTE_ADDR'], 'support-contact')
	]);
});

/* $app->get('/announcement/:id', function($id) use ($app, $user) {
	$app->render('announcement.twig', [
		'pjax'         => array_key_exists('X-PJAX', getallheaders()),
		'announcement' => \PTA\App::getAnnouncement($id)
	]);
});

$app->get('/announcements', function() use ($app, $user) {
	$app->render('announcements.twig', [
		'pjax'          => array_key_exists('X-PJAX', getallheaders()),
		'announcements' => \PTA\App::getAnnouncements()
	]);
}); */

# Display available lessons for a given level
$app->get('/level/:level', function($level) use ($app, $user) {
	$user_level = $user->getLevel();

	# If the request is for a level that is out of bounds, redirect to the user's current level
	if (! $user->isLevelAvailable($level))
		$app->redirect('/level/' . $user_level);

	$app->render('lesson-index.twig', [
		'pjax'          => array_key_exists('X-PJAX', getallheaders()),
		'level'         => $level,
		'user_level'    => $user_level,
		'lessons'       => $user->getLessons($level),
		'min_lesson'    => $user->getMinLesson($level),
		'max_lesson'    => $user->getMaxLesson($level),
		'tips'          => $user->getTips('lesson-index'),
		'progress'      => $user->getProgress(),
		'name'			=> $user->getFirstname()
	]);
});

$app->get('/lessons', function() use ($app, $user) {
	$app->redirect('/level/' . $user->getLevel());
});

# Display video for given level/lesson/gender tuple
$app->get('/level/:level/:lesson/video(/:gender)', function($level, $lesson, $gender = null) use ($app, $user) {
	if (! $user->isLessonAvailable($level, $lesson))
		$app->redirect('/level/' . $user->getLevel());

	$default_gender = $user->getPreferredGender();

	if ($gender === null)
		$gender = $default_gender;

	if (! \PTA\Validate::gender($gender))
		$app->redirect("/level/$level/$lesson/video");

	$chapters = \PTA\App::getVideoChapters($level, $lesson, $gender);

	if ($chapters === null)
		$app->redirect('/level/' . $user->getLevel());

	# Get the preceding and following lessons for back/next style buttons
	$prev_lesson = $user->getPreviousLesson($level, $lesson);
	$next_lesson = $user->getNextLesson($level, $lesson);

	if ($prev_lesson !== null)
		$prev_lesson = '/level/' . $prev_lesson[0] . '/' . $prev_lesson[1] . '/video/' . $gender;

	if ($next_lesson !== null)
		$next_lesson = '/level/' . $next_lesson[0] . '/' . $next_lesson[1] . '/video/' . $gender;

	$app->render('lesson-video.twig', [
		'pjax'           => array_key_exists('X-PJAX', getallheaders()),
		'level'          => $level,
		'lesson'         => $lesson,
		'gender'         => $gender,
		'default_gender' => $default_gender,
		'neturl'         => \PTA\App::getNetConnectionUrl(),
		'chapters'       => $chapters,
		'prev_lesson'    => $prev_lesson,
		'next_lesson'    => $next_lesson,
		'teachers'       => \PTA\App::getTeachers($level),
		'tips'           => $user->getTips('lesson-video')
	]);
});

# Display exercise for given level/lesson tuple
$app->get('/level/:level/:lesson/exercise', function($level, $lesson) use ($app, $user) {
	if (! $user->isLessonAvailable($level, $lesson))
		$app->redirect('/level/' . $user->getLevel());

	$app->render('lesson-exercise.twig', [
		'pjax'    => array_key_exists('X-PJAX', getallheaders()),
		'user_id' => $user->getUserId(),
		'level'   => $level,
		'lesson'  => $lesson,
		'url'     => \PTA\App::getExerciseURL($level, $lesson),
		'movie'   => "//ptaexercise.s3.amazonaws.com/flash/$level/$lesson/movie.swf"
	]);
});


$app->get('/level/:level/:lesson/review', function($level, $lesson) use ($app, $user) {
	if (! $user->isLessonAvailable($level, $lesson))
		$app->redirect('/level/' . $user->getLevel());

	$app->render('lesson-review.twig', [
		'level'  => $level,
		'lesson' => $lesson,
		'movie'  => "//ptaexercise.s3.amazonaws.com/flash/$level/Content_review/$lesson/movie.swf"
	]);
});

# Display exam for given level/lesson tuple
$app->get('/level/:level/:lesson/exam', function($level, $lesson) use ($app, $user) {
	if (! $user->isLessonAvailable($level, $lesson))
		$app->redirect('/level/' . $user->getLevel());
    
	$swf = \PTA\App::getExamURL($level, $lesson);

	$app->render('lesson-exam.twig', [
		'pjax'    => array_key_exists('X-PJAX', getallheaders()),
		'user_id' => $user->getUserId(),
		'level'   => $level,
		'lesson'  => $lesson,
		'movie'   => $swf,
		'nonce'   => $user->createNonce($_SERVER['REMOTE_ADDR'], 'exam')
	]);
});

$app->get('/level/:level/congratulations', function($level) use ($app, $user) {
	$names = preg_split('/\s/', $user->getName());

	# If the request is for a higher level than is available then redirect to the home screen
	if ($level < 2 || ! $user->isLevelAvailable($level))
		$app->redirect('/home');

	$app->render('congratulations.twig', [
		'pjax'      => array_key_exists('X-PJAX', getallheaders()),
		'level'     => $level,
		'firstname' => $names[0]
	]);
});

 $app->get('/apihelp/', function() use ($app, $user) {
	$app->contentType('text/plain');

	print_r(\AM_Lite::getInstance()->getAccess());
	print_r(\AM_Lite::getInstance()->getProducts());

	echo "\n\n# AM_Lite User Array\n\n";
	print_r(\AM_Lite::getInstance()->getUser());

	echo "\n\n# AM_Lite Methods\n\n";
	$class = new ReflectionClass(get_class(\AM_Lite::getInstance()));
	print_r($class->getMethods());

}); 
